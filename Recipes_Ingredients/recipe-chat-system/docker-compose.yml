version: '3.8'

services:
  # PostgreSQL with pgvector
  postgres:
    build: ./database
    container_name: recipe_postgres
    environment:
      POSTGRES_DB: recipes_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./database:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama for Llama 3.2
  ollama:
    image: ollama/ollama:latest
    container_name: recipe_ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        limits:
          memory: 8G
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Langfuse for LLM Observability (OPTIONAL - only runs with --profile langfuse)
  langfuse:
    image: langfuse/langfuse:2.74.0
    container_name: recipe_langfuse
    profiles: ["langfuse"]  # THIS LINE PREVENTS IT FROM STARTING BY DEFAULT
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/langfuse_db
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${LANGFUSE_NEXTAUTH_SECRET:-recipe-chat-secret-change-in-production}
      SALT: ${LANGFUSE_SALT:-recipe-chat-salt-change-in-production}
      ENCRYPTION_KEY: ${LANGFUSE_ENCRYPTION_KEY:-0000000000000000000000000000000000000000000000000000000000000000}
      TELEMETRY_ENABLED: ${LANGFUSE_TELEMETRY_ENABLED:-false}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: false
      LANGFUSE_CACHE_API_KEY_ENABLED: true
      LANGFUSE_LOG_LEVEL: ${LANGFUSE_LOG_LEVEL:-warn}
    ports:
      - "3000:3000"

  # Backend API
  backend:
    build: ./backend
    container_name: recipe_backend
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/recipes_db
      OLLAMA_BASE_URL: http://ollama:11434
      LANGFUSE_HOST: http://langfuse:3000
      LANGFUSE_ENABLED: ${LANGFUSE_ENABLED:-false}
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-}
      SESSION_STORAGE: memory
      PYTHONUNBUFFERED: 1
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      # No dependency on Langfuse - it's optional
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend UI
  frontend:
    build: ./frontend
    container_name: recipe_frontend
    restart: unless-stopped
    env_file: .env
    environment:
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_PORT: 8501
    ports:
      - "8501:8501"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app

  # Model loader - runs once to download Llama 3.2
  model_loader:
    image: ollama/ollama:latest
    container_name: recipe_model_loader
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ollama_data:/root/.ollama
    network_mode: "service:ollama"
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for Ollama to be ready..."
        sleep 20
        export OLLAMA_HOST=http://localhost:11434
        echo "Checking Ollama status..."
        ollama list || echo "First check failed, waiting more..."
        sleep 5
        echo "Pulling Llama 3.2:3b model..."
        ollama pull llama3.2:3b || echo "Model might already exist"
        echo "Checking models..."
        ollama list
        echo "Model loader finished!"

volumes:
  postgres_data:
  ollama_data: